static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         Ufxc.cpp
//
// description :  C++ source for the Ufxc and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                Ufxc are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================


#include <tango.h>
#include <PogoHelper.h>
#include <Ufxc.h>
#include <UfxcClass.h>

namespace Ufxc_ns
{

//+----------------------------------------------------------------------------
//
// method : 		Ufxc::Ufxc(string &s)
// 
// description : 	constructor for simulated Ufxc
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
Ufxc::Ufxc(Tango::DeviceClass *cl, string &s)
:Tango::Device_4Impl(cl, s.c_str())
{
	init_device();
}
Ufxc::Ufxc(Tango::DeviceClass *cl, const char *s)
:Tango::Device_4Impl(cl, s)
{
	init_device();
}
Ufxc::Ufxc(Tango::DeviceClass *cl, const char *s, const char *d)
:Tango::Device_4Impl(cl, s, d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		Ufxc::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void Ufxc::delete_device()
{
	DELETE_DEVSTRING_ATTRIBUTE(attr_libVersion_read);
	DELETE_DEVSTRING_ATTRIBUTE(attr_firmwareVersion_read);
	DELETE_SCALAR_ATTRIBUTE(attr_detectorTemperature_read);
	//	Delete device allocated objects

	//!!!! ONLY LimaDetector device can do this !!!!
	//if(m_ct!=0)
	//{
	//    ControlFactory::instance().reset("Ufxc");
	//    m_ct = 0;
	//}    
}

//+----------------------------------------------------------------------------
//
// method : 		Ufxc::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void Ufxc::init_device()
{
	INFO_STREAM << "Ufxc::Ufxc() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();

	CREATE_DEVSTRING_ATTRIBUTE(attr_libVersion_read, MAX_ATTRIBUTE_STRING_LENGTH);
	CREATE_DEVSTRING_ATTRIBUTE(attr_firmwareVersion_read, MAX_ATTRIBUTE_STRING_LENGTH);
	CREATE_SCALAR_ATTRIBUTE(attr_detectorTemperature_read);
	

	m_is_device_initialized = false;
	set_state(Tango::INIT);
	m_status_message.str("");
	try
	{
		//- get the main object used to pilot the lima framework
		//in fact LimaDetector is create the singleton control objet
		//so this call, will only return existing object, no need to give it the ip !!
		m_ct = ControlFactory::instance().get_control("Ufxc");

		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Ufxc::Interface*> (m_ct->hwInterface());

		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
	}
	catch(Exception& e)
	{
		INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	m_is_device_initialized = true;
	try
	{
		INFO_STREAM << "Write tango hardware at Init - xxx" << endl;


	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		m_status_message << "Initialization Failed : ";
		for(unsigned i = 0;i < df.errors.length();i++)
		{
			m_status_message << df.errors[i].desc << endl;
		}
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(Exception& e)
	{
		ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}

	set_state(Tango::STANDBY);
	dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		Ufxc::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void Ufxc::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConfigIpAddress"));
	dev_prop.push_back(Tango::DbDatum("ConfigPort"));
	dev_prop.push_back(Tango::DbDatum("SFP1IpAddress"));
	dev_prop.push_back(Tango::DbDatum("SFP1Port"));
	dev_prop.push_back(Tango::DbDatum("SFP2IpAddress"));
	dev_prop.push_back(Tango::DbDatum("SFP2Port"));
	dev_prop.push_back(Tango::DbDatum("SFP3IpAddress"));
	dev_prop.push_back(Tango::DbDatum("SFP3Port"));
	dev_prop.push_back(Tango::DbDatum("Timeout"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	UfxcClass	*ds_class =
		(static_cast<UfxcClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize ConfigIpAddress from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  configIpAddress;
	else {
		//	Try to initialize ConfigIpAddress from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  configIpAddress;
	}
	//	And try to extract ConfigIpAddress value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configIpAddress;

	//	Try to initialize ConfigPort from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  configPort;
	else {
		//	Try to initialize ConfigPort from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  configPort;
	}
	//	And try to extract ConfigPort value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configPort;

	//	Try to initialize SFP1IpAddress from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sFP1IpAddress;
	else {
		//	Try to initialize SFP1IpAddress from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sFP1IpAddress;
	}
	//	And try to extract SFP1IpAddress value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sFP1IpAddress;

	//	Try to initialize SFP1Port from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sFP1Port;
	else {
		//	Try to initialize SFP1Port from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sFP1Port;
	}
	//	And try to extract SFP1Port value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sFP1Port;

	//	Try to initialize SFP2IpAddress from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sFP2IpAddress;
	else {
		//	Try to initialize SFP2IpAddress from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sFP2IpAddress;
	}
	//	And try to extract SFP2IpAddress value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sFP2IpAddress;

	//	Try to initialize SFP2Port from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sFP2Port;
	else {
		//	Try to initialize SFP2Port from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sFP2Port;
	}
	//	And try to extract SFP2Port value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sFP2Port;

	//	Try to initialize SFP3IpAddress from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sFP3IpAddress;
	else {
		//	Try to initialize SFP3IpAddress from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sFP3IpAddress;
	}
	//	And try to extract SFP3IpAddress value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sFP3IpAddress;

	//	Try to initialize SFP3Port from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sFP3Port;
	else {
		//	Try to initialize SFP3Port from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sFP3Port;
	}
	//	And try to extract SFP3Port value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sFP3Port;

	//	Try to initialize Timeout from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  timeout;
	else {
		//	Try to initialize Timeout from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  timeout;
	}
	//	And try to extract Timeout value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  timeout;



	//	End of Automatic code generation
	//------------------------------------------------------------------
	
	PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "ConfigIpAddress");
	PropertyHelper::create_property_if_empty(this, dev_prop, "0", "ConfigPort");
	PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "SFP1IpAddress");
	PropertyHelper::create_property_if_empty(this, dev_prop, "0", "SFP1Port");	
	PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "SFP2IpAddress");
	PropertyHelper::create_property_if_empty(this, dev_prop, "0", "SFP2Port");		
	PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "SFP3IpAddress");
	PropertyHelper::create_property_if_empty(this, dev_prop, "0", "SFP3Port");	
	PropertyHelper::create_property_if_empty(this, dev_prop, "0", "Timeout");	
}
//+----------------------------------------------------------------------------
//
// method : 		Ufxc::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void Ufxc::always_executed_hook()
{
	try
	{
		yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
		m_status_message.str("");
		//- get the singleton control objet used to pilot the lima framework
		m_ct = ControlFactory::instance().get_control("Ufxc");

		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Ufxc::Interface*> (m_ct->hwInterface());

		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());

		//update state
		dev_state();
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
	catch(...)
	{
		ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
}
//+----------------------------------------------------------------------------
//
// method : 		Ufxc::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void Ufxc::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "Ufxc::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	//	Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		Ufxc::read_detectorTemperature
// 
// description : 	Extract real attribute values for detectorTemperature acquisition result.
//
//-----------------------------------------------------------------------------
void Ufxc::read_detectorTemperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Ufxc::read_detectorTemperature(Tango::Attribute &attr) entering... "<< endl;
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		unsigned long temp = 0;
		m_camera->get_detector_temperature(temp);

		attr.set_value(attr_detectorTemperature_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Ufxc::read_detectorTemperature");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Ufxc::read_detectorTemperature");
	}	
}

//+----------------------------------------------------------------------------
//
// method : 		Ufxc::read_firmwareVersion
// 
// description : 	Extract real attribute values for firmwareVersion acquisition result.
//
//-----------------------------------------------------------------------------
void Ufxc::read_firmwareVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Ufxc::read_firmwareVersion(Tango::Attribute &attr) entering... "<< endl;
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		std::string version("?.?.?");
		m_camera->get_firmware_version(version);
		strcpy(*attr_firmwareVersion_read, version.c_str());

		attr.set_value(attr_firmwareVersion_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Ufxc::read_firmwareVersion");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Ufxc::read_firmwareVersion");
	}		
}

//+----------------------------------------------------------------------------
//
// method : 		Ufxc::read_libVersion
// 
// description : 	Extract real attribute values for libVersion acquisition result.
//
//-----------------------------------------------------------------------------
void Ufxc::read_libVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Ufxc::read_libVersion(Tango::Attribute &attr) entering... "<< endl;
	yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		std::string version("?.?.?");
		m_camera->get_lib_version(version);
		strcpy(*attr_libVersion_read, version.c_str());

		attr.set_value(attr_libVersion_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  "TANGO_DEVICE_ERROR",
										  string(df.errors[0].desc).c_str(),
										  "Ufxc::read_libVersion");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
									   e.getErrMsg().c_str(),
									   "Ufxc::read_libVersion");
	}	
}


//+------------------------------------------------------------------
/**
 *    method:    Ufxc::dev_state
 *
 *    description:    method to execute "State"
 *    This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return    State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState Ufxc::dev_state()
{
	Tango::DevState argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "Ufxc::dev_state(): entering... !" << endl;

	//    Add your own code to control device here
	stringstream DeviceStatus;
	DeviceStatus << "";
	Tango::DevState DeviceState = Tango::STANDBY;
	if(!m_is_device_initialized)
	{
		DeviceState = Tango::FAULT;
		DeviceStatus << m_status_message.str();
	}
	else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();
	}

	set_state(DeviceState);
	set_status(DeviceStatus.str());

	argout = DeviceState;
	return argout;
}










}	//	namespace
