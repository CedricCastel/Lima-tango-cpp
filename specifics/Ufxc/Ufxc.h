//=============================================================================
//
// file :        Ufxc.h
//
// description : Include for the Ufxc class.
//
// project :	Device specific for Ufxc detector
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _UFXC_H
#define _UFXC_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------

#include "Factory.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"

#include <yat4tango/PropertyHelper.h>
#include "UfxcInterface.h"
#include "UfxcCamera.h"

#define MAX_ATTRIBUTE_STRING_LENGTH     256


using namespace lima;
using namespace std;
using namespace yat4tango;

namespace Ufxc_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::FAULT :
*  Tango::INIT :
*  Tango::RUNNING :
*  Tango::STANDBY :
 */


class Ufxc: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevString	*attr_libVersion_read;
		Tango::DevString	*attr_firmwareVersion_read;
		Tango::DevULong	*attr_detectorTemperature_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	Config Ip Address
 */
	string	configIpAddress;
/**
 *	Config Port
 */
	Tango::DevULong	configPort;
/**
 *	SFP1 Ip Address
 */
	string	sFP1IpAddress;
/**
 *	SFP1 Port
 */
	Tango::DevULong	sFP1Port;
/**
 *	SFP2 Ip Address
 */
	string	sFP2IpAddress;
/**
 *	SFP2 Port
 */
	Tango::DevULong	sFP2Port;
/**
 *	SFP3 Ip Address
 */
	string	sFP3IpAddress;
/**
 *	SFP3 Port
 */
	Tango::DevULong	sFP3Port;
/**
 *	Timeout in ms
 */
	Tango::DevULong	timeout;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Ufxc(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Ufxc(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	Ufxc(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~Ufxc() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Ufxc methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for libVersion acquisition result.
 */
	virtual void read_libVersion(Tango::Attribute &attr);
/**
 *	Extract real attribute values for firmwareVersion acquisition result.
 */
	virtual void read_firmwareVersion(Tango::Attribute &attr);
/**
 *	Extract real attribute values for detectorTemperature acquisition result.
 */
	virtual void read_detectorTemperature(Tango::Attribute &attr);
/**
 *	Read/Write allowed for libVersion attribute.
 */
	virtual bool is_libVersion_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for firmwareVersion attribute.
 */
	virtual bool is_firmwareVersion_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for detectorTemperature attribute.
 */
	virtual bool is_detectorTemperature_allowed(Tango::AttReqType type);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	

	// return true if the device is correctly initialized in init_device
	bool is_device_initialized(){return m_is_device_initialized;};

protected :	
	//	Add your own data members here
	//-----------------------------------------
    //state & status stuff
    bool                      m_is_device_initialized ;
    stringstream              m_status_message;
    
    //lima OBJECTS
    lima::Ufxc::Interface*  m_hw;
    lima::CtControl*          m_ct;
    lima::Ufxc::Camera*     m_camera;	    
	
};

}	// namespace_ns

#endif	// _UFXC_H
