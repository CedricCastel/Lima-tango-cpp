/*----- PROTECTED REGION ID(SlsDetector.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        SlsDetector.cpp
//
// description : C++ source for the SlsDetector class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               SlsDetector are implemented in this file.
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SlsDetector.h>
#include <SlsDetectorClass.h>

// SYSTEM
#include <map>
#include <string>

/*----- PROTECTED REGION END -----*/	//	SlsDetector.cpp

/**
 *  SlsDetector class description:
 *    Device for sls detectors from PSI. 
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  SetCmd        |  set_cmd
//  GetCmd        |  get_cmd
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  thresholdEnergy      |  Tango::DevLong	Scalar
//  clockDivider         |  Tango::DevString	Scalar
//  configFileName       |  Tango::DevString	Scalar
//  rawMode              |  Tango::DevBoolean	Scalar
//  readoutFlags         |  Tango::DevString	Scalar
//  tolerateLostPackets  |  Tango::DevBoolean	Scalar
//  nbBadFrames          |  Tango::DevLong	Scalar
//  hostnameList         |  Tango::DevString	Spectrum  ( max = 64)
//  dacNameList          |  Tango::DevString	Spectrum  ( max = 64)
//  dacNameListMv        |  Tango::DevString	Spectrum  ( max = 64)
//  adcNameList          |  Tango::DevString	Spectrum  ( max = 64)
//  allTrimBits          |  Tango::DevLong	Spectrum  ( max = 64)
//  badFrameList         |  Tango::DevLong	Spectrum  ( max = 100000)
//================================================================

namespace SlsDetector_ns
{
/*----- PROTECTED REGION ID(SlsDetector::namespace_starting) ENABLED START -----*/

//	static initializations
//-------------------------------------------------------------------------
// CLOCK DIVIDER
//-------------------------------------------------------------------------
static const std::vector<std::string> TANGO_CLOCK_DIVIDER_LABELS{"FULL_SPEED", "HALF_SPEED", "QUARTER_SPEED", "SUPER_SLOW_SPEED" }; // labels of clock divider

std::vector<enum lima::SlsDetector::Defs::ClockDiv> TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE{lima::SlsDetector::Defs::ClockDiv::FullSpeed     ,
                                                                                       lima::SlsDetector::Defs::ClockDiv::HalfSpeed     ,
                                                                                       lima::SlsDetector::Defs::ClockDiv::QuarterSpeed  ,
                                                                                       lima::SlsDetector::Defs::ClockDiv::SuperSlowSpeed};
/*----- PROTECTED REGION END -----*/	//	SlsDetector::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::SlsDetector()
 *	Description : Constructors for a Tango device
 *                implementing the classSlsDetector
 */
//--------------------------------------------------------
SlsDetector::SlsDetector(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(SlsDetector::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::constructor_1
}
//--------------------------------------------------------
SlsDetector::SlsDetector(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(SlsDetector::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::constructor_2
}
//--------------------------------------------------------
SlsDetector::SlsDetector(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(SlsDetector::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void SlsDetector::delete_device()
{
	DEBUG_STREAM << "SlsDetector::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	delete [] attr_clockDivider_read  [0];
	delete [] attr_configFileName_read[0];
	delete [] attr_readoutFlags_read  [0];
	
	int index = 0;
	
	for(index = 0 ; index < 64 ; index++)
	{
		delete [] attr_hostnameList_read [index];
		delete [] attr_dacNameList_read  [index];
		delete [] attr_dacNameListMv_read[index];
		delete [] attr_adcNameList_read  [index];
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::delete_device
	delete[] attr_thresholdEnergy_read;
	delete[] attr_clockDivider_read;
	delete[] attr_configFileName_read;
	delete[] attr_rawMode_read;
	delete[] attr_readoutFlags_read;
	delete[] attr_tolerateLostPackets_read;
	delete[] attr_nbBadFrames_read;
	delete[] attr_hostnameList_read;
	delete[] attr_dacNameList_read;
	delete[] attr_dacNameListMv_read;
	delete[] attr_adcNameList_read;
	delete[] attr_allTrimBits_read;
	delete[] attr_badFrameList_read;
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void SlsDetector::init_device()
{
	DEBUG_STREAM << "SlsDetector::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::init_device_before) ENABLED START -----*/
	INFO_STREAM << "SlsDetector::init_device() create device " << device_name << endl;

    m_is_device_initialized = false;
	set_state(Tango::INIT);
	m_status_message.str("");

	try
	{
		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("SlsDetector");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::SlsDetector::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
	}
	catch(Exception& e)
	{
		INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg( ) << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_thresholdEnergy_read = new Tango::DevLong[1];
	attr_clockDivider_read = new Tango::DevString[1];
	attr_configFileName_read = new Tango::DevString[1];
	attr_rawMode_read = new Tango::DevBoolean[1];
	attr_readoutFlags_read = new Tango::DevString[1];
	attr_tolerateLostPackets_read = new Tango::DevBoolean[1];
	attr_nbBadFrames_read = new Tango::DevLong[1];
	attr_hostnameList_read = new Tango::DevString[64];
	attr_dacNameList_read = new Tango::DevString[64];
	attr_dacNameListMv_read = new Tango::DevString[64];
	attr_adcNameList_read = new Tango::DevString[64];
	attr_allTrimBits_read = new Tango::DevLong[64];
	attr_badFrameList_read = new Tango::DevLong[100000];

	/*----- PROTECTED REGION ID(SlsDetector::init_device) ENABLED START -----*/

	attr_clockDivider_read  [0] = new char[ 256];
	attr_configFileName_read[0] = new char[1024];
	attr_readoutFlags_read  [0] = new char[1024];

	::strcpy(attr_clockDivider_read  [0], "");
	::strcpy(attr_configFileName_read[0], "");
	::strcpy(attr_readoutFlags_read  [0], "");
	
	int index = 0;
	
	for(index = 0 ; index < 64 ; index++)
	{
		attr_hostnameList_read [index] = new char[1024];
		attr_dacNameList_read  [index] = new char[1024];
		attr_dacNameListMv_read[index] = new char[1024];
		attr_adcNameList_read  [index] = new char[1024];
		
		::strcpy(attr_hostnameList_read [index], "");
		::strcpy(attr_dacNameList_read  [index], "");
		::strcpy(attr_dacNameListMv_read[index], "");
		::strcpy(attr_adcNameList_read  [index], "");
	}
	
	//	Initialize device
	m_is_device_initialized = true;
	set_state(Tango::STANDBY);
	dev_state();	
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::init_device
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void SlsDetector::get_device_property()
{
	/*----- PROTECTED REGION ID(SlsDetector::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConfigFileName"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on SlsDetectorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		SlsDetectorClass	*ds_class =
			(static_cast<SlsDetectorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ConfigFileName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  configFileName;
		else {
			//	Try to initialize ConfigFileName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  configFileName;
		}
		//	And try to extract ConfigFileName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configFileName;

	}

	/*----- PROTECTED REGION ID(SlsDetector::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "", "ConfigFileName");
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void SlsDetector::always_executed_hook()
{
	INFO_STREAM << "SlsDetector::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
    try
    {
        m_status_message.str("");
		
		//update state
        dev_state();
	}
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "always_executed_hook : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "always_executed_hook : UNKNOWN" << endl;
        m_status_message << "always_executed_hook : UNKNOWN" << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void SlsDetector::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SlsDetector::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : SlsDetector::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void SlsDetector::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SlsDetector::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute thresholdEnergy related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_thresholdEnergy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_thresholdEnergy(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_thresholdEnergy) ENABLED START -----*/
	try
	{
        int thres;
        // get the camera value
	    m_camera->getThresholdEnergy(thres);
        //Set the attribute value
		*attr_thresholdEnergy_read = (Tango::DevLong)(thres);
        attr.set_value(attr_thresholdEnergy_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_thresholdEnergy");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_thresholdEnergy");
	}
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_thresholdEnergy
}
//--------------------------------------------------------
/**
 *	Write attribute thresholdEnergy related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::write_thresholdEnergy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_thresholdEnergy(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_thresholdEnergy) ENABLED START -----*/
    try
	{
        m_camera->setThresholdEnergy(static_cast<int>(w_val));
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::write_thresholdEnergy");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::write_thresholdEnergy");
	}	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_thresholdEnergy
}
//--------------------------------------------------------
/**
 *	Read attribute clockDivider related method
 *	Description: Changes the readout clock.<br>
 *               Available clock Divider :<br>
 *               FULL_SPEED<br>
 *               HALF_SPEED<br>
 *               QUARTER_SPEED<br>
 *               SUPER_SLOW_SPEED<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_clockDivider(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_clockDivider(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_clockDivider) ENABLED START -----*/
    //	Set the attribute value

    try
    {
        enum lima::SlsDetector::Defs::ClockDiv clock_divider;

        // get the camera value
        m_camera->getClockDiv(clock_divider);

        const std::vector<enum lima::SlsDetector::Defs::ClockDiv>::const_iterator 
        iterator = find(TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.begin(), 
                        TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.end  (),
                        clock_divider                             );

        // found it
        if (iterator != TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.end()) 
        {
            string clock_divider_label = TANGO_CLOCK_DIVIDER_LABELS[iterator - TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE.begin()]; // calculation gives the index

            //Set the attribute value
            strcpy(*attr_clockDivider_read, clock_divider_label.c_str());
            attr.set_value(attr_clockDivider_read);
        }
        else
        {
            std::ostringstream MsgErr;
            MsgErr << "Impossible to found the clock divider mode " << clock_divider << std::endl;

            Tango::Except::throw_exception("LOGIC_ERROR",
                                           MsgErr.str().c_str(),
                                           "SlsDetector::read_clockDivider");
        }
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_clockDivider");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_clockDivider");
	}

	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_clockDivider
}
//--------------------------------------------------------
/**
 *	Write attribute clockDivider related method
 *	Description: Changes the readout clock.<br>
 *               Available clock Divider :<br>
 *               FULL_SPEED<br>
 *               HALF_SPEED<br>
 *               QUARTER_SPEED<br>
 *               SUPER_SLOW_SPEED<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::write_clockDivider(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_clockDivider(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_clockDivider) ENABLED START -----*/
	
    // we need to convert the clock divider string to the hardware clock divider
    enum lima::SlsDetector::Defs::ClockDiv clock_divider;

    const std::vector<string>::const_iterator 
    iterator = find(TANGO_CLOCK_DIVIDER_LABELS.begin(), 
                    TANGO_CLOCK_DIVIDER_LABELS.end  (),
                    string(w_val)                    );

    // found it
    if (iterator != TANGO_CLOCK_DIVIDER_LABELS.end()) 
    {
        clock_divider = TANGO_CLOCK_DIVIDER_LABELS_TO_TYPE[iterator - TANGO_CLOCK_DIVIDER_LABELS.begin()]; // calculation gives the index
    }
    else
    {
        std::stringstream message;
        message.str("");
        message << "Incorrect clock divider : " << w_val << std::endl;
        message << "Available clock divider modes are :" << std::endl;
        message << "FULL_SPEED"       << std::endl;
        message << "HALF_SPEED"       << std::endl;
        message << "QUARTER_SPEED"    << std::endl;
        message << "SUPER_SLOW_SPEED" << std::endl;

        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       message.str().c_str(), 
                                       "Controller::write_clockDivider()");
    }

    try
    {
        // set the camera value
        m_camera->setClockDiv(clock_divider);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::write_clockDivider");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::write_clockDivider");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_clockDivider
}
//--------------------------------------------------------
/**
 *	Read attribute configFileName related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_configFileName(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_configFileName(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_configFileName) ENABLED START -----*/
	
	try
	{
		//Set the attribute value
		strcpy(*attr_configFileName_read, configFileName.c_str());
		attr.set_value(attr_configFileName_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_configFileName");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_configFileName");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_configFileName
}
//--------------------------------------------------------
/**
 *	Read attribute rawMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_rawMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_rawMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_rawMode) ENABLED START -----*/

	try
	{
        // get the camera value
		bool raw_mode;
		m_camera->getRawMode(raw_mode);

        //Set the attribute value
		*attr_rawMode_read = (Tango::DevBoolean)(raw_mode);
        attr.set_value(attr_rawMode_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_rawMode");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_rawMode");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_rawMode
}
//--------------------------------------------------------
/**
 *	Write attribute rawMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::write_rawMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_rawMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_rawMode) ENABLED START -----*/
	
    try
	{
		m_camera->setRawMode(static_cast<bool>(w_val));
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::write_rawMode");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::write_rawMode");
	}	
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_rawMode
}
//--------------------------------------------------------
/**
 *	Read attribute readoutFlags related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_readoutFlags(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_readoutFlags(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_readoutFlags) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_readoutFlags_read);
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_readoutFlags
}
//--------------------------------------------------------
/**
 *	Write attribute readoutFlags related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::write_readoutFlags(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_readoutFlags(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_readoutFlags) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_readoutFlags
}
//--------------------------------------------------------
/**
 *	Read attribute tolerateLostPackets related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_tolerateLostPackets(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_tolerateLostPackets(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_tolerateLostPackets) ENABLED START -----*/

	try
	{
        // get the camera value
		bool tol_lost_packets;
		m_camera->getTolerateLostPackets(tol_lost_packets);

        //Set the attribute value
		*attr_tolerateLostPackets_read = (Tango::DevBoolean)(tol_lost_packets);
        attr.set_value(attr_tolerateLostPackets_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_tolerateLostPackets");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_tolerateLostPackets");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_tolerateLostPackets
}
//--------------------------------------------------------
/**
 *	Write attribute tolerateLostPackets related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::write_tolerateLostPackets(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_tolerateLostPackets(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_tolerateLostPackets) ENABLED START -----*/

    try
	{
		m_camera->setTolerateLostPackets(static_cast<bool>(w_val));
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::write_tolerateLostPackets");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::write_tolerateLostPackets");
	}	
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_tolerateLostPackets
}
//--------------------------------------------------------
/**
 *	Read attribute nbBadFrames related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_nbBadFrames(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_nbBadFrames(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_nbBadFrames) ENABLED START -----*/

	try
	{
		// Get the attribute value
		lima::SlsDetector::Camera::IntList bad_frame_list;
		m_camera->getBadFrameList(bad_frame_list);
		
		*attr_nbBadFrames_read = bad_frame_list.size();
		attr.set_value(attr_nbBadFrames_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_nbBadFrames");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_nbBadFrames");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_nbBadFrames
}
//--------------------------------------------------------
/**
 *	Read attribute hostnameList related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
//--------------------------------------------------------
void SlsDetector::read_hostnameList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_hostnameList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_hostnameList) ENABLED START -----*/
	//	Set the attribute value

    try
    {
        // get the camera value
		lima::SlsDetector::Camera::NameList host_name_list = m_camera->getHostnameList();

		for(size_t index = 0 ; index < host_name_list.size() ; index++)
		{
			strcpy(attr_hostnameList_read[index], host_name_list[index].c_str());
		} 		

		attr.set_value(attr_hostnameList_read, host_name_list.size());
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_hostnameList");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_hostnameList");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_hostnameList
}
//--------------------------------------------------------
/**
 *	Read attribute dacNameList related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
//--------------------------------------------------------
void SlsDetector::read_dacNameList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_dacNameList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_dacNameList) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_dacNameList_read, 64);
	
    try
    {
		lima::SlsDetector::Camera::NameList name_list      ;
		lima::SlsDetector::Camera::IntList  idx_list       ;
		lima::SlsDetector::Camera::IntList  milli_volt_list;
				
		m_camera->getModel()->getDACInfo(name_list, idx_list, milli_volt_list);

		for(size_t index = 0 ; index < name_list.size() ; index++)
		{
			strcpy(attr_dacNameList_read[index], name_list[index].c_str());
		} 		 

		attr.set_value(attr_dacNameList_read, name_list.size());
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_dacNameList");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_dacNameList");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_dacNameList
}
//--------------------------------------------------------
/**
 *	Read attribute dacNameListMv related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
//--------------------------------------------------------
void SlsDetector::read_dacNameListMv(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_dacNameListMv(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_dacNameListMv) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_dacNameListMv_read, 64);
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_dacNameListMv
}
//--------------------------------------------------------
/**
 *	Read attribute adcNameList related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
//--------------------------------------------------------
void SlsDetector::read_adcNameList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_adcNameList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_adcNameList) ENABLED START -----*/

    try
    {
		lima::SlsDetector::Camera::NameList  name_list   ;
		lima::SlsDetector::Camera::IntList   idx_list    ;
		lima::SlsDetector::Camera::FloatList factor_list ;
		lima::SlsDetector::Camera::FloatList min_val_list;
				
		m_camera->getModel()->getADCInfo(name_list, idx_list, factor_list, min_val_list);

		for(size_t index = 0 ; index < name_list.size() ; index++)
		{
			strcpy(attr_adcNameList_read[index], name_list[index].c_str());
		} 		

		attr.set_value(attr_adcNameList_read, name_list.size());
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_adcNameList");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_adcNameList");
	}

	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_adcNameList
}
//--------------------------------------------------------
/**
 *	Read attribute allTrimBits related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 64
 */
//--------------------------------------------------------
void SlsDetector::read_allTrimBits(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_allTrimBits(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_allTrimBits) ENABLED START -----*/

    try
    {
		// Get the attribute value
		lima::SlsDetector::Camera::IntList trim_bits_list;
		m_camera->getAllTrimBitsList(trim_bits_list);

		for(size_t index = 0 ; index < trim_bits_list.size() ; index++)
		{
			attr_allTrimBits_read[index] = (Tango::DevLong)(trim_bits_list[index]);
		} 		
		
		attr.set_value(attr_allTrimBits_read, trim_bits_list.size());
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_allTrimBits");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_allTrimBits");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_allTrimBits
}
//--------------------------------------------------------
/**
 *	Write attribute allTrimBits related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 64
 */
//--------------------------------------------------------
void SlsDetector::write_allTrimBits(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_allTrimBits(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevLong	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_allTrimBits) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_allTrimBits
}
//--------------------------------------------------------
/**
 *	Read attribute badFrameList related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 100000
 */
//--------------------------------------------------------
void SlsDetector::read_badFrameList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_badFrameList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_badFrameList) ENABLED START -----*/

    try
    {
		// Get the attribute value
		lima::SlsDetector::Camera::IntList bad_frame_list;
		m_camera->getBadFrameList(bad_frame_list);

		for(size_t index = 0 ; index < bad_frame_list.size() ; index++)
		{
			attr_badFrameList_read[index] = (Tango::DevLong)(bad_frame_list[index]);
		} 		
		
		attr.set_value(attr_badFrameList_read, bad_frame_list.size());
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::read_badFrameList");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::read_badFrameList");
	}
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_badFrameList
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void SlsDetector::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(SlsDetector::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command SetCmd related method
 *	Description: 
 *
 *	@param argin SlsDetector command
 */
//--------------------------------------------------------
void SlsDetector::set_cmd(Tango::DevString argin)
{
	DEBUG_STREAM << "SlsDetector::SetCmd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::set_cmd) ENABLED START -----*/
    try
    {
		m_camera->putCmd(std::string(argin));
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::put_cmd");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::put_cmd");
	}
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::set_cmd
}
//--------------------------------------------------------
/**
 *	Command GetCmd related method
 *	Description: 
 *
 *	@param argin SlsDetector command
 *	@returns SlsDetector response
 */
//--------------------------------------------------------
Tango::DevString SlsDetector::get_cmd(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "SlsDetector::GetCmd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::get_cmd) ENABLED START -----*/

    try
    {
		std::string result = m_camera->getCmd(std::string(argin));
		
        argout = new char[result.size() + 1];
        
		if (result.size() > 0)
        {
			result.copy(argout, result.size());
        }
        
		argout[result.size()] = '\0';
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SlsDetector::get_cmd");
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SlsDetector::get_cmd");
	}

	/*----- PROTECTED REGION END -----*/	//	SlsDetector::get_cmd
	return argout;
}

/*----- PROTECTED REGION ID(SlsDetector::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState SlsDetector::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "SlsDetector::dev_state(): entering... !" << endl;

	//	Add your own code to control device here
	stringstream    DeviceStatus;
	DeviceStatus     << "";
	Tango::DevState DeviceState    = Tango::STANDBY;
	if(!m_is_device_initialized )
	{
		DeviceState  = Tango::FAULT;
		DeviceStatus << m_status_message.str();
	}
	else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();
	}

	set_state (DeviceState);
	set_status(DeviceStatus.str());

	return DeviceState;
}

/*----- PROTECTED REGION END -----*/	//	SlsDetector::namespace_ending
} //	namespace
