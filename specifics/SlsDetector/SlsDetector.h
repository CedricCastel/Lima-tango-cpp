/*----- PROTECTED REGION ID(SlsDetector.h) ENABLED START -----*/
//=============================================================================
//
// file :        SlsDetector.h
//
// description : Include file for the SlsDetector class
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SlsDetector_H
#define SlsDetector_H

#include <tango.h>

//- YAT/YAT4TANGO
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/DynamicInterfaceManager.h>

#include "Factory.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"

#include "SlsDetectorInterface.h"
#include "SlsDetectorCamera.h"


using namespace yat4tango;

/*----- PROTECTED REGION END -----*/	//	SlsDetector.h

/**
 *  SlsDetector class description:
 *    Device for sls detectors from PSI. 
 */

namespace SlsDetector_ns
{
/*----- PROTECTED REGION ID(SlsDetector::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	SlsDetector::Additional Class Declarations

class SlsDetector : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(SlsDetector::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	SlsDetector::Data Members

//	Device property data members
public:
	//	ConfigFileName:	Configuration files used during the camera instanciation.
	string	configFileName;

//	Attribute data members
public:
	Tango::DevLong	*attr_thresholdEnergy_read;
	Tango::DevString	*attr_clockDivider_read;
	Tango::DevString	*attr_configFileName_read;
	Tango::DevBoolean	*attr_rawMode_read;
	Tango::DevString	*attr_readoutFlags_read;
	Tango::DevBoolean	*attr_tolerateLostPackets_read;
	Tango::DevLong	*attr_nbBadFrames_read;
	Tango::DevString	*attr_hostnameList_read;
	Tango::DevString	*attr_dacNameList_read;
	Tango::DevString	*attr_dacNameListMv_read;
	Tango::DevString	*attr_adcNameList_read;
	Tango::DevLong	*attr_allTrimBits_read;
	Tango::DevLong	*attr_badFrameList_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SlsDetector(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SlsDetector(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SlsDetector(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~SlsDetector() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SlsDetector::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : SlsDetector::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute thresholdEnergy related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_thresholdEnergy(Tango::Attribute &attr);
	virtual void write_thresholdEnergy(Tango::WAttribute &attr);
	virtual bool is_thresholdEnergy_allowed(Tango::AttReqType type);
/**
 *	Attribute clockDivider related methods
 *	Description: Changes the readout clock.<br>
 *               Available clock Divider :<br>
 *               FULL_SPEED<br>
 *               HALF_SPEED<br>
 *               QUARTER_SPEED<br>
 *               SUPER_SLOW_SPEED<br>
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_clockDivider(Tango::Attribute &attr);
	virtual void write_clockDivider(Tango::WAttribute &attr);
	virtual bool is_clockDivider_allowed(Tango::AttReqType type);
/**
 *	Attribute configFileName related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_configFileName(Tango::Attribute &attr);
	virtual bool is_configFileName_allowed(Tango::AttReqType type);
/**
 *	Attribute rawMode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_rawMode(Tango::Attribute &attr);
	virtual void write_rawMode(Tango::WAttribute &attr);
	virtual bool is_rawMode_allowed(Tango::AttReqType type);
/**
 *	Attribute readoutFlags related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_readoutFlags(Tango::Attribute &attr);
	virtual void write_readoutFlags(Tango::WAttribute &attr);
	virtual bool is_readoutFlags_allowed(Tango::AttReqType type);
/**
 *	Attribute tolerateLostPackets related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_tolerateLostPackets(Tango::Attribute &attr);
	virtual void write_tolerateLostPackets(Tango::WAttribute &attr);
	virtual bool is_tolerateLostPackets_allowed(Tango::AttReqType type);
/**
 *	Attribute nbBadFrames related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_nbBadFrames(Tango::Attribute &attr);
	virtual bool is_nbBadFrames_allowed(Tango::AttReqType type);
/**
 *	Attribute hostnameList related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
	virtual void read_hostnameList(Tango::Attribute &attr);
	virtual bool is_hostnameList_allowed(Tango::AttReqType type);
/**
 *	Attribute dacNameList related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
	virtual void read_dacNameList(Tango::Attribute &attr);
	virtual bool is_dacNameList_allowed(Tango::AttReqType type);
/**
 *	Attribute dacNameListMv related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
	virtual void read_dacNameListMv(Tango::Attribute &attr);
	virtual bool is_dacNameListMv_allowed(Tango::AttReqType type);
/**
 *	Attribute adcNameList related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 64
 */
	virtual void read_adcNameList(Tango::Attribute &attr);
	virtual bool is_adcNameList_allowed(Tango::AttReqType type);
/**
 *	Attribute allTrimBits related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 64
 */
	virtual void read_allTrimBits(Tango::Attribute &attr);
	virtual void write_allTrimBits(Tango::WAttribute &attr);
	virtual bool is_allTrimBits_allowed(Tango::AttReqType type);
/**
 *	Attribute badFrameList related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 100000
 */
	virtual void read_badFrameList(Tango::Attribute &attr);
	virtual bool is_badFrameList_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : SlsDetector::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command SetCmd related method
	 *	Description: 
	 *
	 *	@param argin SlsDetector command
	 */
	virtual void set_cmd(Tango::DevString argin);
	virtual bool is_SetCmd_allowed(const CORBA::Any &any);
	/**
	 *	Command GetCmd related method
	 *	Description: 
	 *
	 *	@param argin SlsDetector command
	 *	@returns SlsDetector response
	 */
	virtual Tango::DevString get_cmd(Tango::DevString argin);
	virtual bool is_GetCmd_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(SlsDetector::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
private:
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	Tango::DevState	dev_state();

protected :	
    //lima OBJECTS
    lima::SlsDetector::Interface * m_hw    ;
    lima::CtControl              * m_ct    ;
    lima::SlsDetector::Camera    * m_camera;
	bool                           m_is_device_initialized;
    stringstream                   m_status_message        ;

	yat4tango::DynamicInterfaceManager m_dim;

/*----- PROTECTED REGION END -----*/	//	SlsDetector::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SlsDetector::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	SlsDetector::Additional Classes Definitions

}	//	End of namespace

#endif   //	SlsDetector_H
