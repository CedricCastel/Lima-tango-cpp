/*----- PROTECTED REGION ID(SlsDetector.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        SlsDetector.cpp
//
// description : C++ source for the SlsDetector class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               SlsDetector are implemented in this file.
//
// project :     Sls dectector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SlsDetector.h>
#include <SlsDetectorClass.h>

/*----- PROTECTED REGION END -----*/	//	SlsDetector.cpp

/**
 *  SlsDetector class description:
 *    Device for sls detectors from PSI. 
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  tresholdEnergy  |  Tango::DevLong	Scalar
//================================================================

namespace SlsDetector_ns
{
/*----- PROTECTED REGION ID(SlsDetector::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	SlsDetector::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::SlsDetector()
 *	Description : Constructors for a Tango device
 *                implementing the classSlsDetector
 */
//--------------------------------------------------------
SlsDetector::SlsDetector(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str()),m_dim(this)
{
	/*----- PROTECTED REGION ID(SlsDetector::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::constructor_1
}
//--------------------------------------------------------
SlsDetector::SlsDetector(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s),m_dim(this)
{
	/*----- PROTECTED REGION ID(SlsDetector::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::constructor_2
}
//--------------------------------------------------------
SlsDetector::SlsDetector(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d),m_dim(this)
{
	/*----- PROTECTED REGION ID(SlsDetector::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void SlsDetector::delete_device()
{
	DEBUG_STREAM << "SlsDetector::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::delete_device
	delete[] attr_tresholdEnergy_read;
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void SlsDetector::init_device()
{
	DEBUG_STREAM << "SlsDetector::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::init_device_before) ENABLED START -----*/
	INFO_STREAM << "SlsDetector::init_device() create device " << device_name << endl;

    m_is_device_initialized = false;
	set_state(Tango::INIT);
	m_status_message.str("");

	try
	{
		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("SlsDetector");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::SlsDetector::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());

	}
	catch(Exception& e)
	{
		INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg( ) << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	m_is_device_initialized = true;
	set_state(Tango::STANDBY);
	dev_state();	

	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_tresholdEnergy_read = new Tango::DevLong[1];

	/*----- PROTECTED REGION ID(SlsDetector::init_device) ENABLED START -----*/
	
	//	Initialize device
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::init_device
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void SlsDetector::get_device_property()
{
	/*----- PROTECTED REGION ID(SlsDetector::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConfigFname"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on SlsDetectorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		SlsDetectorClass	*ds_class =
			(static_cast<SlsDetectorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ConfigFname from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  configFname;
		else {
			//	Try to initialize ConfigFname from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  configFname;
		}
		//	And try to extract ConfigFname value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configFname;

	}

	/*----- PROTECTED REGION ID(SlsDetector::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "", "ConfigFname");
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void SlsDetector::always_executed_hook()
{
	DEBUG_STREAM << "SlsDetector::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(SlsDetector::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void SlsDetector::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SlsDetector::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : SlsDetector::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void SlsDetector::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SlsDetector::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute tresholdEnergy related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::read_tresholdEnergy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SlsDetector::read_tresholdEnergy(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(SlsDetector::read_tresholdEnergy) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_tresholdEnergy_read);
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::read_tresholdEnergy
}
//--------------------------------------------------------
/**
 *	Write attribute tresholdEnergy related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void SlsDetector::write_tresholdEnergy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SlsDetector::write_tresholdEnergy(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(SlsDetector::write_tresholdEnergy) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::write_tresholdEnergy
}

//--------------------------------------------------------
/**
 *	Method      : SlsDetector::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void SlsDetector::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(SlsDetector::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	SlsDetector::add_dynamic_attributes
}


/*----- PROTECTED REGION ID(SlsDetector::namespace_ending) ENABLED START -----*/

//	Additional Methods
//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState SlsDetector::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "SlsDetector::dev_state(): entering... !" << endl;

	//	Add your own code to control device here
	stringstream    DeviceStatus;
	DeviceStatus     << "";
	Tango::DevState DeviceState    = Tango::STANDBY;
	if(!m_is_device_initialized )
	{
		DeviceState  = Tango::FAULT;
		DeviceStatus << m_status_message.str();
	}
	else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();
	}

	set_state (DeviceState);
	set_status(DeviceStatus.str());

	return DeviceState;
}

/*----- PROTECTED REGION END -----*/	//	SlsDetector::namespace_ending
} //	namespace
